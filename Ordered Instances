                                           import com.nomagic.magicdraw.core.*
import com.nomagic.uml2.ext.magicdraw.classes.mdkernel.*

// Get the current project and model
def project = Application.getInstance().getProject()
def model = project.getModel()

println "Searching for associations with ordered member ends..."

def associationsWithOrderedEnds = []

// Recursive function to find all associations
def findAssociations
findAssociations = { element ->
    def associations = []
    
    if (element instanceof Association) {
        associations.add(element)
    }
    
    // Check owned elements recursively
    element.getOwnedElement().each { ownedElement ->
        associations.addAll(findAssociations(ownedElement))
    }
    
    return associations
}

// Get all associations
def allAssociations = findAssociations(model)

// Check each association for ordered member ends
allAssociations.each { association ->
    def orderedEnds = []
    
    // Check each member end of the association
    association.getMemberEnd().each { memberEnd ->
        if (memberEnd.isOrdered()) {
            orderedEnds.add(memberEnd)
        }
    }
    
    // If any member end is ordered, add to results
    if (!orderedEnds.isEmpty()) {
        associationsWithOrderedEnds.add([
            association: association,
            orderedEnds: orderedEnds
        ])
        
        println "Found association: '${association.getName() ?: 'unnamed'}'"
        orderedEnds.each { end ->
            def endType = end.getType()?.getName() ?: 'untyped'
            println "  - Ordered end: '${end.getName() ?: 'unnamed'}' (type: ${endType})"
        }
        println ""
    }
}

println "Summary:"
println "Total associations with ordered member ends: ${associationsWithOrderedEnds.size()}"
