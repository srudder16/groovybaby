/**
 * Validation Rule: IML Conceptual Interface Ownership Constraint
 * IML-031.1
 * Requirement: Interfaces Modeling Library (IML) Conceptual Interfaces 
 * shall only own Flow Properties, IML Interactions, and IML Conceptual Ports.
 */

import com.nomagic.magicdraw.core.Application
import com.nomagic.uml2.ext.magicdraw.classes.mdkernel.*
import com.nomagic.uml2.ext.magicdraw.classes.mdinterfaces.*
import com.nomagic.uml2.ext.magicdraw.compositestructures.mdports.*
import com.nomagic.uml2.ext.magicdraw.commonbehaviors.mdcommunications.*
import com.nomagic.uml2.ext.magicdraw.activities.mdbasicactivities.*

// Get the element being validated
Element element = validationTarget

// Check if this is an IML Conceptual Interface
if (!isIMLConceptualInterface(element)) {
    return // Not applicable to this element
}

// Get all owned elements
Collection<Element> ownedElements = element.getOwnedElement()

// Check each owned element
List<String> violations = []

for (Element ownedElement : ownedElements) {
    if (!isAllowedOwnedElement(ownedElement)) {
        violations.add("IML Conceptual Interface '${element.getName()}' owns disallowed element '${ownedElement.getName()}' of type '${ownedElement.getClass().getSimpleName()}'")
    }
}

// Report violations
if (!violations.isEmpty()) {
    for (String violation : violations) {
        Application.getInstance().getGUILog().log(violation)
    }
    // Return false to indicate validation failure
    return false
}

// Validation passed
return true

/**
 * Determines if the element is an IML Conceptual Interface
 * This may need to be adjusted based on your specific stereotyping approach
 */
boolean isIMLConceptualInterface(Element element) {
    // Check if element is an Interface
    if (!(element instanceof Interface)) {
        return false
    }
    
    // Method 1: Check for IML Conceptual Interface stereotype
    // Adjust stereotype name as needed for your model
    if (hasStereotype(element, "IML Conceptual Interface") || 
        hasStereotype(element, "IMLConceptualInterface") ||
        hasStereotype(element, "Conceptual Interface")) {
        return true
    }
    
    // Method 2: Check if element is in IML package/namespace
    // Uncomment and adjust as needed
    /*
    Element owner = element.getOwner()
    while (owner != null) {
        if (owner instanceof Package && 
            (owner.getName()?.contains("IML") || owner.getName()?.contains("Interfaces Modeling Library"))) {
            return true
        }
        owner = owner.getOwner()
    }
    */
    
    // Method 3: Check for naming convention
    // Uncomment if using naming conventions
    /*
    String name = element.getName()
    if (name != null && (name.startsWith("IML_") || name.contains("ConceptualInterface"))) {
        return true
    }
    */
    
    return false
}

/**
 * Determines if an owned element is allowed in an IML Conceptual Interface
 */
boolean isAllowedOwnedElement(Element element) {
    // Allow Flow Properties (typically Property elements with flow stereotype)
    if (isFlowProperty(element)) {
        return true
    }
    
    // Allow IML Interactions (typically Operations or Receptions)
    if (isIMLInteraction(element)) {
        return true
    }
    
    // Allow IML Conceptual Ports (typically Port elements)
    if (isIMLConceptualPort(element)) {
        return true
    }
    
    // Allow standard Interface elements that don't violate the constraint
    if (isStandardInterfaceElement(element)) {
        return true
    }
    
    return false
}

/**
 * Check if element is a Flow Property
 */
boolean isFlowProperty(Element element) {
    if (!(element instanceof Property)) {
        return false
    }
    
    // Check for flow-related stereotypes
    return hasStereotype(element, "FlowProperty") ||
           hasStereotype(element, "Flow Property") ||
           hasStereotype(element, "ItemFlow") ||
           hasFlowDirection(element)
}

/**
 * Check if element is an IML Interaction
 */
boolean isIMLInteraction(Element element) {
    // IML Interactions are typically Operations, Receptions, or similar behavioral features
    if (element instanceof Operation || element instanceof Reception) {
        return hasStereotype(element, "IMLInteraction") ||
               hasStereotype(element, "IML Interaction") ||
               hasStereotype(element, "Interaction") ||
               isInIMLNamespace(element)
    }
    
    return false
}

/**
 * Check if element is an IML Conceptual Port
 */
boolean isIMLConceptualPort(Element element) {
    if (!(element instanceof Port)) {
        return false
    }
    
    return hasStereotype(element, "IMLConceptualPort") ||
           hasStereotype(element, "IML Conceptual Port") ||
           hasStereotype(element, "Conceptual Port") ||
           isInIMLNamespace(element)
}

/**
 * Check for standard interface elements that are always allowed
 */
boolean isStandardInterfaceElement(Element element) {
    // Allow comments, constraints, and other documentation elements
    return element instanceof Comment ||
           element instanceof Constraint ||
           element instanceof ElementImport ||
           element instanceof PackageImport
}

/**
 * Helper method to check if element has a specific stereotype
 */
boolean hasStereotype(Element element, String stereotypeName) {
    return element.getAppliedStereotype().any { 
        it.getName().equals(stereotypeName) || 
        it.getName().toLowerCase().contains(stereotypeName.toLowerCase())
    }
}

/**
 * Helper method to check if element has flow direction properties
 */
boolean hasFlowDirection(Element element) {
    if (!(element instanceof Property)) {
        return false
    }
    
    Property prop = (Property) element
    // Check for flow direction tags/properties
    return prop.getTaggedValue().any { 
        it.getTagDefinition()?.getName()?.toLowerCase()?.contains("direction") ||
        it.getTagDefinition()?.getName()?.toLowerCase()?.contains("flow")
    }
}

/**
 * Helper method to check if element is in IML namespace
 */
boolean isInIMLNamespace(Element element) {
    Element owner = element.getOwner()
    while (owner != null) {
        String name = owner.getName()
        if (name != null && (name.contains("IML") || name.contains("Interfaces Modeling Library"))) {
            return true
        }
        owner = owner.getOwner()
    }
    return false
}
